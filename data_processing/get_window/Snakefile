# snakemake --dryrun --printshellcmds --reason --jobs 1 --resources load=100
# snakemake --printshellcmds --reason --jobs "$(($(nproc --all) / 2))" --resources load=100

import os

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Define master rule (forces Snakemake to generate all missing files)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Replace with where you want to save output files
DATADIR = "/fs/cbsubscb17/storage/projects/CLIPNET/data/k562/coords/"
# Replace with scratch space directory
WORKDIR = "/workdir/ayh8/data/k562/procap/"
# Replace with location of raw data generated by download_data
RAWDIR = "/fs/cbsubscb17/storage/data/hg38/k562/procap/"

peaks = os.path.join(DATADIR, "k562_procap_pairedPeak_autosomes.bed.gz")
windows = os.path.join(DATADIR, "k562_procap_tss_1kb_windows.bed.gz")
centered_windows = os.path.join(DATADIR, "k562_procap_tss_1kb_centered_windows.bed.gz")
merged_bigwigs = expand(
    os.path.join(RAWDIR, "k562_procap_{pm}.rpm.bigWig"), pm=["pl", "mn"]
)


rule all:  # A master rule that ensures all the other rules run
    input:
        peaks,
        windows,
        centered_windows,
    params:
        WORKDIR,
    shell:
        "echo rm -rf {params}"


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Merge bigwig files
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


rule merge_bigwigs:
    input:
        pl=[
            os.path.join(RAWDIR, "ENCFF994CSC.bigWig"),
            os.path.join(RAWDIR, "ENCFF580QEK.bigWig"),
        ],
        mn=[
            os.path.join(RAWDIR, "ENCFF253HUA.bigWig"),
            os.path.join(RAWDIR, "ENCFF328OOU.bigWig"),
        ],
    output:
        pl=os.path.join(WORKDIR, "k562_procap_pl.bedGraph"),
        mn=os.path.join(WORKDIR, "k562_procap_mn.bedGraph"),
    shell:
        """
        bigWigMerge {input.pl} {output.pl}
        bigWigMerge {input.mn} -threshold=-1000000.0 {output.mn}.tmp
        awk 'BEGIN{{FS="\t"}}{{if ($4!=0) print $0}}' {output.mn}.tmp > {output.mn}
        """


rule bedSort:
    input:
        pl=os.path.join(WORKDIR, "k562_procap_pl.bedGraph"),
        mn=os.path.join(WORKDIR, "k562_procap_mn.bedGraph"),
    output:
        pl=os.path.join(WORKDIR, "k562_procap_pl_sort.bedGraph"),
        mn=os.path.join(WORKDIR, "k562_procap_mn_sort.bedGraph"),
    shell:
        """
        bedSort {input.pl} {output.pl}
        bedSort {input.mn} {output.mn}
        """


rule save_merged_bw:
    input:
        os.path.join(WORKDIR, "k562_procap_{pm}_sort.bedGraph"),
    params:
        chromsizes="/fs/cbsubscb17/storage/data/hg38/hg38.chrom.sizes",
    output:
        os.path.join(RAWDIR, "k562_procap_{pm}.bigWig"),
    shell:
        "bedGraphToBigWig {input} {params} {output}"


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Convert bedgraph to bigwig
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


rule bedgraph_to_bigwig:
    input:
        os.path.join(WORKDIR, "k562_procap_{pm}_sort.bedGraph"),
    params:
        chromsizes="/fs/cbsubscb17/storage/data/hg38/hg38.chrom.sizes",
    output:
        os.path.join(WORKDIR, "k562_procap_{pm}.bigWig"),
    shell:
        """
        bedGraphToBigWig {input} {params} {output}
        """


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Run PINTS
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


rule run_PINTS:
    input:
        pl=os.path.join(WORKDIR, "k562_procap_pl.bigWig"),
        mn=os.path.join(WORKDIR, "k562_procap_mn.bigWig"),
    params:
        output_dir=os.path.join(WORKDIR, "peaks"),
        output_prefix="k562",
    resources:
        load=5,
    output:
        os.path.join(WORKDIR, "peaks/k562_procap_narrowPeak.bed"),
    shell:
        """
        python ../../data_processing_scripts/PINTS_master/caller_rev2.py bigwig \
            {params} --bw-pl {input.pl} --bw-mn {input.mn}
        """


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Filter for TSS pairs
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


rule split_plmn:
    input:
        os.path.join(WORKDIR, "peaks/k562_procap_narrowPeak.bed"),
    output:
        pl=os.path.join(WORKDIR, "peaks/k562_procap_narrowPeak_pl.bed"),
        mn=os.path.join(WORKDIR, "peaks/k562_procap_narrowPeak_mn.bed"),
    shell:
        """
        awk '{{if($6=="+") print $0}}' {input} > {output.pl}
        awk '{{if($6=="-") print $0}}' {input} > {output.mn}
        """


rule get_divergent_pairs:
    input:
        pl=os.path.join(WORKDIR, "peaks/k562_procap_narrowPeak_pl.bed"),
        mn=os.path.join(WORKDIR, "peaks/k562_procap_narrowPeak_mn.bed"),
    output:
        os.path.join(WORKDIR, "peaks/k562_procap_pairedPeak.bed"),
    shell:
        "python ../../data_processing_scripts/get_divergent_pairs.py {input} > {output}"


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Only autosomes
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


rule only_autosomes:
    input:
        os.path.join(WORKDIR, "peaks/k562_procap_pairedPeak.bed"),
    output:
        peaks,
    shell:
        "awk '/^chr[0-9]*\t/' {input} | gzip > {output}"


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Get window coordinates
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


rule get_window:
    input:
        peaks,
    params:
        buffer=250,
        seed=47,
    resources:
        load=1,
    output:
        windows,
    shell:
        """
        python ../../data_processing_scripts/sample_windows.py \
            {input} --buffer {params.buffer} --seed {params.seed} | \
            sort | uniq | gzip > {output}
        """


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Get window coordinates
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


rule centered_windows:
    input:
        peaks,
    params:
        buffer=0,
    output:
        centered_windows,
    shell:
        """
        python ../../data_processing_scripts/sample_windows.py \
            {input} --buffer {params.buffer} | sort | uniq | gzip > {output}
        """
